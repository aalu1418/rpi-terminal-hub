package infrared

import (
	"log"
	"time"

	rpio "github.com/stianeikeland/go-rpio/v4"
)

var (
	FREQUENCY = int64(38000) // 38 kHz
)

func NewRecorder(pin rpio.Pin) {
	rpio.Open()
	defer rpio.Close()

	pin.Input()
	pin.Pwm()
	pin.Freq(38000)

	log.Print("[IR] recorder ready")
	var start = time.Now()
	var detected bool
	var timings []time.Duration
	state := pin.Read()
	for {
		since := time.Since(start)
		if state != pin.Read() { // if edge changes
			detected = true
			timings = append(timings, since) // log how long edge was in current state
			start = time.Now()               // save change timestamp
			continue                         // continue loop with evaluating exit condition
		}

		// exit if signal detected and there is a 1s gap (likely signal is ended)
		// exit if no signal detected and there is 10s waiting
		if (detected && since > time.Second) || (!detected && since > 10*time.Second) {
			break
		}
	}
	if !detected {
		log.Print("[IR] no signal")
		return
	}

	var parsed []int64 // nanosecond timing

	periodNanoS := 1_000_000_000 / FREQUENCY
	halfPeriodNanoS := periodNanoS / 2

	var total time.Duration // track total time
	var sum int64
	for _, val := range timings {
		total += val
		v := int64(val)
		// if measured duration is faster than halfPeriodNanoS, add to total
		// PWM signal will have many flickering values
		if int64(v) <= halfPeriodNanoS {
			sum += v
			continue
		}

		parsed = append(parsed, sum) // when gaps are seen, add the summed value
		parsed = append(parsed, v)   // gaps will not have flickering
		sum = 0                      // reset sum count for next set of flickering values
	}
	parsed = append(parsed, sum)

	// remove first two values
	// [0] - first sum == 0
	// [1] - first gap (waiting for initial signal)
	parsed = parsed[2:]
	total = total - time.Duration(parsed[0]) - time.Duration(parsed[1])

	log.Printf("[IR] signal timing - %s: %+v", total, parsed)
}

// home
// [955406 2983550 154320 1444719 194633 470046 176978 514732 139062 1480864 183538 453431 191404 1453885 192555 1480655 124269 1458728 192493 473900 184420 446035 188123 289788 195579 472025 184790 1473259 178649 1472791 175516 1473364 182233 1477686 74112 476556 183219 475618 183015 476139 182130 476399 176094 474628 182756 474836 174165 474472 150676 253903 182545 1479509 182662 478795 181671 1479093 181407 477910 180307 452077 192025 1478572 177547 1477999 182608 478118 130356 29711177 1020889 2985217 176621 1446229 192395 479107 180210 470305 178382 1445083 305351 1454145 185726 1481176 179324 1459406 186415 473327 175361 473170 177234 472701 176562 472284 180201 1472530 184055 1471541 181978 1471228 179477 1449094 189159 447962 246457 473326 175988 472649 176508 472025 175408 471920 180573 471035 179789 475983 176402 1476593 182965 475305 177657 1474978 176031 473847 176044 473274 177083 1473468 175562 1447479 186561 473275 176406 29860029 674868 2987769 176867 1449197 189004 447442 191408 473378 181878 1474093 177602 472754 178792 1473416 176826 1447374 186716 1451333 184640 476503 175943 477025 176869 475826 176358 475358 177186 1476281 180152 1475447 180365 1448937 187291 1452843 123073 231194 176973 477180 73123 30937 93131 476712 175681 476451 177293 475722 177910 473847 171720 479368 176451 1479666 175565 479003 180938 1479040 170456 478274 176301 477545 176874 1450864 159742 1477947 176660 478118 176034]

// start/stop
// [39479 266141460 53131 448576700 0 16512726 0 8137797 0 8455553 469 417288357 971876 2905426 190259 1455343 193640 443640 148280 472910 182658 1480239 181980 480670 181974 1481489 133019 1445031 68283 25781 116770 1450135 193442 1450759 192858 1476750 114320 1450656 185413 1477478 173171 477076 181863 1478155 182285 477493 138331 1312689 193742 472233 185304 444941 190988 471400 182698 470879 49321 31510 121561 471139 182078 470879 165723 127498 185107 475722 183016 1476489 183283 475305 182344 474680 180678 474576 184380 1475447 181877 1448989 191768 474472 115001 230413 182603 30093621 1034886 2956467 185935 1454614 182857 453900 183589 453067 139109 938736 177657 454733 187234 1481592 174318 1481593 183894 1476332 182920 1450499 184013 1450604 186509 1451489 184485 1451958 185724 477233 179218 1452374 190200 476816 179218 1456228 28696 30260 165832 470879 182554 471191 184219 471191 183275 470670 185156 470566 174686 481191 133642 18958 20367 484472 177497 1475603 176565 474889 171344 474681 177077 474056 176462 1474614 176297 1474562 176396 473639 176034 448691 194324 29890239 679986 2956050 183385 1454562 184432 454733 180984 479993 175149 1454666 173537 480358 176716 1481020 173495 1454718 183844 1460916 190417 1450083 189740 1450812 184629 1450968 184678 1451385 184060 477441 175624 1478051 177079 476972 132398 285048 179370 472024 178544 471243 178439 471139 184217 470723 182130 471035 178177 469941 168123 481035 175558 485513 178175 1475760 177242 474888 177341 474420 176509 473899 176665 1474927 177449 1474353 176865 473222 175888 473847 176863]

// 30min
// [937691 2986935 155987 1449146 192553 448483 194780 458587 143538 1475500 184374 474420 185779 1474197 186508 1474041 139840 1453312 193495 478535 183437 478534 178751 1264565 183390 1479249 184212 478170 182912 1478885 178382 477597 184949 482076 84063 471452 185827 471243 185514 470566 182341 481087 183591 480045 182800 479837 182030 479577 127756 338120 175830 1473103 174941 1473468 180253 472493 183230 472180 178642 1445865 186712 471660 176048 1472062 178340 1447115 162705 29624724 184638 16875 852108 2951572 192190 1449406 183335 475410 179585 474160 177966 1448260 311084 1473573 180990 1473989 182352 1478312 178130 477806 178848 476816 181400 1451385 191709 1450396 185465 476191 176402 1449771 176768 448223 188371 479421 178594 480306 60310 15625 180732 477962 178005 478326 177240 477233 177137 476764 170878 476035 176618 481139 93849 29218 75677 1481229 177076 1480500 174424 479732 176727 452962 184069 1479770 174161 478431 177385 1452323 185357 1479822 180786 29852638 267649 3054956 169622 1473781 180778 471973 157705 471712 171349 1446646 185777 471399 178753 1446021 186248 1472270 178856 1450031 185884 476295 68440 25833 86610 475254 176451 1449510 189791 1449406 192596 474733 176464 1475655 176761 473483 176307 452077 184783 477493 176622 477649 175254 477649 94787 340100 168282 475306 176313 475722 176609 480513 173276 1481020 146244 23958 10832 1480759 175665 479472 176297 479733 173846 1478832 176296 478326 176713 1453208 183535 1453989 183376]